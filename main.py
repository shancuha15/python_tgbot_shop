import sqlite3

import telebot

import btn as nav
import const
import db as dbv
import reminder as rem

# Token connection.
bot = telebot.TeleBot(const.API_TOKEN)


# Database connection.
conn = sqlite3.connect('botusers.db', check_same_thread=False)
cursor = conn.cursor()


# Sending a message from the reminder.txt file to users from the database entered in the user_list.txt file.
# Only an administrator with a unique username can send messages to users.
@bot.message_handler(commands=['reminder'])
def reminder(message):
    token = const.API_TOKEN
    chatID = []
    calc = 0
    text_file = open('reminder.txt', 'r', encoding='utf-8')
    text = text_file.read()
    text_file.close()
    u_id = message.from_user.username
    if u_id == 'hrdrfstrsmtr':
        file = open('user_list.txt')
        for i in file:
            chatID.append(i)
            calc += 1
        file.close()
        chatID = [x.replace('\n', '') for x in chatID]
        for i in chatID:
            rem.send_text(token, i, text)


# The "start" command sends a greeting to the user, collects information about the user in the database.
@bot.message_handler(commands=['start'])
def start(message):
    username = []
    name = message.from_user.username
    bot.send_message(message.chat.id, text=""" 
    –í–∞—Å –≤—ñ—Ç–∞—î —ñ–Ω—Ç–µ—Ä–Ω–µ—Ç-–º–∞–≥–∞–∑–∏–Ω Artspase üé®‚ú®
–¢—É—Ç —Ç–∏ –º–æ–∂–µ—à –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏, –æ–±—Ä–∞—Ç–∏ —Ç–∞ –∑–∞–º–æ–≤–∏—Ç–∏ —Ç–æ–≤–∞—Ä–∏, —è–∫—ñ —Ç–æ–±—ñ –¥–æ–≤–ø–æ–¥–æ–±–∏ ‚ò∫Ô∏è–û–±–∏—Ä–∞–π –Ω–µ–æ–±—Ö—ñ–¥–Ω—É –æ–ø—Ü—ñ—é —Ç–∞ —Ç–∏—Ü—è–π –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É! –Ø —á–µ–∫–∞—é..
    """.format(message.from_user),
                     reply_markup=nav.markup_menu)
    us_id = message.from_user.id
    us_name = message.from_user.first_name
    us_sname = message.from_user.last_name
    username = message.from_user.username
    dbv.db_table_val(user_id=us_id, user_name=us_name, user_surname=us_sname, username=username)


# The "Contacts" command sends to the user necessary information to contact the owner.
@bot.message_handler(commands=['contacts'])
def contact(message):
    bot.send_message(message.chat.id, text="""
    –ù–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏:
    
@rita_bgrv - –≤–ª–∞—Å–Ω–∏—Ü—è üì©
@hrdrfstrsmtr - —Ç–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ üõ†
    """.format(message.from_user))


# Commands that respond to button clicks.
@bot.message_handler(content_types=['text'])
def main_menu(message):
    if message.text == "üõí –¢–æ–≤–∞—Ä–∏":
        bot.send_message(message.chat.id, "coming soon...",
                         reply_markup=nav.markup_products)
    elif message.text == "‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –æ –Ω–∞—Å":
        bot.send_message(message.chat.id, """coming soon...""", reply_markup=nav.markup_menu)
    elif message.text == "‚úâÔ∏è –ü—ñ–¥—Ç—Ä–∏–º–∫–∞":
        bot.send_message(message.chat.id, """
        –í–∞—Å –≤—ñ—Ç–∞—î –ø—ñ–¥—Ç—Ä–∏–º–∫–∞ –º–∞–≥–∞–∑–∏–Ω—É Artspase. üí¨
–£ –≤–∞—Å —â–æ—Å—å —Ç—Ä–∞–ø–∏–ª–æ—Å—å? ü§Øüò±
     ‚ñ™Ô∏è–î–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è –≤–∞—à–æ–≥–æ –ø–∏—Ç–∞–Ω–Ω—è —á–∏ –¥–ª—è –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ–π –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–ª–∞–≤—ñ—à—É ¬´–î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è¬ª. 
      ‚ñ™Ô∏è –î–ª—è –≤–∏—Ä—ñ—à–µ–Ω–Ω—è —Ç–µ—Ö–Ω—ñ—á–Ω–∏—Ö –ø–∏—Ç–∞–Ω—å –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–ª–∞–≤—ñ—à—É ¬´–¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞¬ª. 
                                            """, reply_markup=nav.markup_support)
    elif message.text == 'üìÉ –ü–µ—Ä–µ–ª—ñ–∫ —Ç–æ–≤–∞—Ä—ñ–≤':
        bot.send_message(message.chat.id, text="""üìÉ –ü–µ—Ä–µ–ª—ñ–∫ —Ç–æ–≤–∞—Ä—ñ–≤!""", reply_markup=nav.markup_perelik)
    elif message.text == 'üì¶ –ù–∞–±–æ—Ä–∏':
        bot.send_message(message.chat.id, text="""coming soon...""",
                         reply_markup=nav.markup_products)
    elif message.text == 'üìâ –ó–Ω–∏–∂–∫–∏':
        bot.send_message(message.chat.id, text="""coming soon...""", reply_markup=nav.markup_products)
    elif message.text == 'üíÅ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è':
        bot.send_message(message.chat.id, text="""coming soon...""", reply_markup=nav.markup_products)
    elif message.text == '‚¨ÖÔ∏è–ù–∞–∑–∞–¥':
        bot.send_message(message.chat.id, text='–ü–æ–≤–µ—Ä—Ç–∞—é –Ω–∞–∑–∞–¥!', reply_markup=nav.markup_menu)
    elif message.text == 'üì© –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è':
        bot.send_message(message.chat.id, text="""–ù–∞—Ç–∏—Å–Ω–∏ —Ç—É—Ç üëáüèªÔ∏è""",
                         reply_markup=nav.markup_follow_Rita)
    elif message.text == 'üì© –¢–µ—Ö–Ω—ñ—á–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞':
        bot.send_message(message.chat.id, text="""–ù–∞—Ç–∏—Å–Ω–∏ —Ç—É—Ç üëáüèªÔ∏è""", reply_markup=nav.markup_follow_Vlad)
    elif message.text == 'üìì –ë–ª–æ–∫–Ω–æ—Ç–∏':
        info_notebook_list = {'1': '1-–π –±–ª–æ–∫–Ω–æ—Ç', '2': '2-–π –±–ª–æ–∫–Ω–æ—Ç', '3': '3-–π –±–ª–æ–∫–Ω–æ—Ç', '4': '4-–π –±–ª–æ–∫–Ω–æ—Ç',
                              '5': '5-–π –±–ª–æ–∫–Ω–æ—Ç', '6': '6-–π –±–ª–æ–∫–Ω–æ—Ç'}
        a = '.png'
        for i in range(1, len(info_notebook_list) + 1, 1):
            conv = str(i)
            bot.send_photo(message.chat.id, photo=open(r"pictures/notebook/notebook" + conv + a
                                                       , 'rb'), caption=info_notebook_list[conv])
    elif message.text == 'üé® –ö–∞—Ä—Ç–∏–Ω–∏':
        info_painting_list = {'1': '1-–∞ –∫–∞—Ä—Ç–∏–Ω–∞', '2': '2-–∞ –∫–∞—Ä—Ç–∏–Ω–∞', '3': '3-—è –∫–∞—Ä—Ç–∏–Ω–∞', '4': '4-–∞ –∫–∞—Ä—Ç–∏–Ω–∞',
                              '5': '5-–∞ –∫–∞—Ä—Ç–∏–Ω–∞', '6': '6-–∞ –∫–∞—Ä—Ç–∏–Ω–∞', '7': '7-–∞ –∫–∞—Ä—Ç–∏–Ω–∞'}
        a = '.png'
        for i in range(1, len(info_painting_list) + 1, 1):
            conv = str(i)
            bot.send_photo(message.chat.id, photo=open(r"pictures/painting/paint" + conv + a,
                                                       'rb'), caption=info_painting_list[conv])
    elif message.text == 'üìÉ –°—Ç—ñ–∫–µ—Ä–∏':
        info_sticker_list = {'1': '1-–π —Å—Ç—ñ–∫ ', '2': '2-–π —Å—Ç—ñ–∫', '3': '3-–π —Å—Ç—ñ–∫', '4': '4-–π —Å—Ç—ñ–∫', '5': '5-–π —Å—Ç—ñ–∫',
                             '6': '6-–π —Å—Ç—ñ–∫'}
        a = '.png'
        for i in range(1, len(info_sticker_list) + 1, 1):
            conv = str(i)
            bot.send_photo(message.chat.id, photo=open(r"pictures/stickers/stick" + conv + a,
                                                       'rb'), caption=info_sticker_list[conv])
    elif message.text == 'ü´∂–†–æ–∑–∫–∞–∑–∞—Ç–∏ –ø—Ä–æ –Ω–∞—Å':
        bot.send_message(message.chat.id, "üëáüèª", reply_markup=nav.markup_share)
    elif message.text == '‚¨ÖÔ∏è–ùa–∑–∞–¥':
        bot.send_message(message.chat.id, text='–ü–æ–≤–µ—Ä—Ç–∞—é –Ω–∞–∑–∞–¥!', reply_markup=nav.markup_products)
    else:
        bot.reply_to(message, """–Ø –≤–∞—Å –Ω–µ —Ä–æ–∑—É–º—ñ—é""", reply_markup=nav.markup_menu)


if __name__ == '__main__':
    bot.polling()
